1) Состояние гонки - конкуренция между потоками за доступ к данным первым. 
Существуют 2 типа:
- безопасные гонки, при которых не возникает странных последствий
- опасные гонки - которые могут привести к неопределённому поведению 
Решением данной проблемы является Мьютекс
2) Мьютекс - средство для предоставления потоку эксклюзивного доступа к данным. Создаётся экземпляр класса мьютекс, в начале рассматриваемой функции делается lock - закрывается доступ к данным, а в конце unlock - доступ к данным снова открывается.

Условные переменные -  работают вместе с мьютексом, средство для работы с событями, позволяют многоразово ожидать выполнения условия. В месте, где необходимо устранить конкуренцию, пишется вызывается wait(), и все
потоки ждут, пока та же условная переменная в какой-то момент не пропустит один из потоков или все потоки командами notify_one/_all


3) Гранулярность блокировки - объём данных, попадающих под блокировку. 
Мелкая гранулярность - возрастает риск гонки и взаимоблокировок
Большая гранулярность - больше операций - возрастает время ожидания
Гранулярность следует выбирать так, чтобы ожидание минимизировалось, но при этом не страдала безопасность.

4)Взаимоблокировка - два потока блокируют два мьютекса. Если случается, что каждый одновременно блокирует по одному, то второй для каждого становится недоступен. Оба ждут друг друга.
Способы разрешения:
	1)Использовать мьютексы с приоритетами
	2)Избегать вложенных блокировок
	3) Использовать std::lock / boost::lock
	4) Использовать одинаковый порядок блокировок (т. е. чтобы не было двух потоков, идущих 	"навстречу" друг к другу


5)Атомарная операция - та, которая из любого потока видна либо как выполненная, либо невыполненная. А именно всегда либо полностью выполняется, либо вообще не выполняется. Частичного выполнения не бывает. 
Атомарный тип данных - тип данных, любые операции с которым атомарны.
